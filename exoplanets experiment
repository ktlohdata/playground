# Experimenting with neural network model for exoplanets data
# code originally from Andrew Ng's Deep Learning course exercises on coursera.org, modified for experimental purposes.

"""""
"""""

import numpy as np
import matplotlib.pyplot as plt
import math

# Import training data
traindata = np.loadtxt('exoTrain.csv', skiprows=1, delimiter=',')
x_train = traindata[:, 1:].reshape(3197,5087)
y_train = traindata[:, 0].reshape(1,5087) - 1.

# Import test data
testdata = np.loadtxt('exoTest.csv', skiprows=1, delimiter=',')
x_test = testdata[:, 1:].reshape(3197,570)
y_test = testdata[:, 0].reshape(1,570) - 1.

# Normalise X

x_train = ((x_train - np.mean(x_train, axis=1).reshape(-1,1)) / 
           np.std(x_train, axis=1).reshape(-1,1))
x_test = ((x_test - np.mean(x_test, axis=1).reshape(-1,1)) / 
          np.std(x_test, axis=1).reshape(-1,1))

# batch approach - adding more positive examples



#### start model below

def plot_decision_boundary(model, X, y):
    # Set min and max values and give it some padding
    x_min, x_max = X[0, :].min() - 1, X[0, :].max() + 1
    y_min, y_max = X[1, :].min() - 1, X[1, :].max() + 1
    h = 0.01
    # Generate a grid of points with distance h between them
    xx, yy = np.meshgrid(np.arange(x_min, x_max,h), np.arange(y_min, y_max,h))
    # Predict the function value for the whole grid
    Z = model(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    # Plot the contour and training examples
    plt.contourf(xx, yy, Z, cmap=plt.cm.Spectral)
    plt.ylabel('x2')
    plt.xlabel('x1')
    plt.scatter(X[0, :], X[1, :], c=y, cmap=plt.cm.Spectral)
    plt.show()

def sigmoid(x):
    """
    Compute the sigmoid of x

    Arguments:
    x -- A scalar or numpy array of any size.

    Return:
    s -- sigmoid(x)
    """
    s = 1/(1+np.exp(-x))
    return s

def relu(x):
    """
    Compute the relu of x

    Arguments:
    x -- A scalar or numpy array of any size.

    Return:
    s -- relu(x)
    """
    s = np.maximum(0,x)

    return s



def initialize_parameters(layer_dims):
    parameters = {}
    L = len(layer_dims) # number of layers in the network

    for l in range(1, L):
        parameters['W' + str(l)] = np.random.randn(layer_dims[l], layer_dims[l-1]) / np.sqrt(layer_dims[l-1])
        parameters['b' + str(l)] = np.zeros((layer_dims[l], 1))

        assert(parameters['W' + str(l)].shape == layer_dims[l], layer_dims[l-1])
        assert(parameters['W' + str(l)].shape == layer_dims[l], 1)


    return parameters

def forward_propagation(X, parameters):
    """
    Implements the forward propagation (and computes the loss) presented in Figure 2.

    Arguments:
    X -- input dataset, of shape (input size, number of examples)
    parameters -- python dictionary containing your parameters "W1", "b1", "W2", "b2", "W3", "b3":
                    W1 -- weight matrix of shape ()
                    b1 -- bias vector of shape ()
                    W2 -- weight matrix of shape ()
                    b2 -- bias vector of shape ()
                    W3 -- weight matrix of shape ()
                    b3 -- bias vector of shape ()

    Returns:
    loss -- the loss function (vanilla logistic loss)
    """

    # retrieve parameters
    W1 = parameters["W1"]
    b1 = parameters["b1"]
    W2 = parameters["W2"]
    b2 = parameters["b2"]
    W3 = parameters["W3"]
    b3 = parameters["b3"]
    W4 = parameters["W4"]
    b4 = parameters["b4"]

    # LINEAR -> RELU -> LINEAR -> RELU -> LINEAR -> SIGMOID
    Z1 = np.dot(W1, X) + b1
    A1 = relu(Z1)
    Z2 = np.dot(W2, A1) + b2
    A2 = relu(Z2)
    Z3 = np.dot(W3, A2) + b3
    A3 = relu(Z3)
    Z4 = np.dot(W4, A3) + b4
    A4 = sigmoid(Z4)

    cache = (Z1, A1, W1, b1, Z2, A2, W2, b2, Z3, A3, W3, b3,Z4, A4, W4, b4)

    return A4, cache

def backward_propagation(X, Y, cache):
    """
    Implement the backward propagation presented in figure 2.

    Arguments:
    X -- input dataset, of shape (input size, number of examples)
    Y -- true "label" vector (containing 0 if cat, 1 if non-cat)
    cache -- cache output from forward_propagation()

    Returns:
    gradients -- A dictionary with the gradients with respect to each parameter, activation and pre-activation variables
    """
    m = X.shape[1]
    (Z1, A1, W1, b1, Z2, A2, W2, b2, Z3, A3, W3, b3, Z4, A4, W4, b4) = cache

    dZ4 = A4 - Y
    dW4 = 1./m * np.dot(dZ4, A3.T)
    db4 = 1./m * np.sum(dZ4, axis=1, keepdims = True)
    
    dA3 = np.dot(W4.T, dZ4)
    dZ3 = np.multiply(dA3, np.int64(A3 > 0))
    dW3 = 1./m * np.dot(dZ3, A2.T)
    db3 = 1./m * np.sum(dZ3, axis=1, keepdims = True)

    dA2 = np.dot(W3.T, dZ3)
    dZ2 = np.multiply(dA2, np.int64(A2 > 0))
    dW2 = 1./m * np.dot(dZ2, A1.T)
    db2 = 1./m * np.sum(dZ2, axis=1, keepdims = True)

    dA1 = np.dot(W2.T, dZ2)
    dZ1 = np.multiply(dA1, np.int64(A1 > 0))
    dW1 = 1./m * np.dot(dZ1, X.T)
    db1 = 1./m * np.sum(dZ1, axis=1, keepdims = True)

    gradients = {"dZ4": dZ4, "dW4": dW4, "db4": db4,
                 "dZ3": dZ3, "dW3": dW3, "db3": db3,
                 "dA2": dA2, "dZ2": dZ2, "dW2": dW2, "db2": db2,
                 "dA1": dA1, "dZ1": dZ1, "dW1": dW1, "db1": db1}

    return gradients

def update_parameters(parameters, grads, learning_rate):
    """
    Update parameters using gradient descent

    Arguments:
    parameters -- python dictionary containing your parameters:
                    parameters['W' + str(i)] = Wi
                    parameters['b' + str(i)] = bi
    grads -- python dictionary containing your gradients for each parameters:
                    grads['dW' + str(i)] = dWi
                    grads['db' + str(i)] = dbi
    learning_rate -- the learning rate, scalar.

    Returns:
    parameters -- python dictionary containing your updated parameters
    """

    n = len(parameters) // 2 # number of layers in the neural networks

    # Update rule for each parameter
    for k in range(n):
        parameters["W" + str(k+1)] = parameters["W" + str(k+1)] - learning_rate * grads["dW" + str(k+1)]
        parameters["b" + str(k+1)] = parameters["b" + str(k+1)] - learning_rate * grads["db" + str(k+1)]

    return parameters

def predict(X, y, parameters):
    """
    This function is used to predict the results of a  n-layer neural network.

    Arguments:
    X -- data set of examples you would like to label
    parameters -- parameters of the trained model

    Returns:
    p -- predictions for the given dataset X
    """

    m = X.shape[1]
    p = np.zeros((1,m), dtype = np.int)

    # Forward propagation
    a4, caches = forward_propagation(X, parameters)

    # convert probas to 0/1 predictions
    for i in range(0, a4.shape[1]):
        if a4[0,i] > 0.5:
            p[0,i] = 1
        else:
            p[0,i] = 0

    # print results

    #print ("predictions: " + str(p[0,:]))
    #print ("true labels: " + str(y[0,:]))
    print("Accuracy: "  + str(np.mean((p[0,:] == y[0,:]))))

    return p

def compute_cost(a4, Y):
    """
    Implement the cost function

    Arguments:
    a3 -- post-activation, output of forward propagation
    Y -- "true" labels vector, same shape as a3

    Returns:
    cost - value of the cost function
    """
    m = Y.shape[1]

    logprobs = np.multiply(-np.log(a4),Y) + np.multiply(-np.log(1 - a4), 1 - Y)
    cost = 1./m * np.nansum(logprobs) 

    return cost

def predict_dec(parameters, X):
    """
    Used for plotting decision boundary.

    Arguments:
    parameters -- python dictionary containing your parameters
    X -- input data of size (m, K)

    Returns
    predictions -- vector of predictions of our model (red: 0 / blue: 1)
    """

    # Predict using forward propagation and a classification threshold of 0.5
    a4, cache = forward_propagation(X, parameters)
    predictions = (a4>0.5)
    return predictions

def model(X, Y, learning_rate = 0.02, num_iterations = 1000, print_cost = True, lambd = 0.1, keep_prob = 0.5):
    """
    Implements a three-layer neural network: LINEAR->RELU->LINEAR->RELU->LINEAR->SIGMOID.

    Arguments:
    X -- input data, of shape (input size, number of examples)
    Y -- true "label" vector (1 for blue dot / 0 for red dot), of shape (output size, number of examples)
    learning_rate -- learning rate of the optimization
    num_iterations -- number of iterations of the optimization loop
    print_cost -- If True, print the cost every 10000 iterations
    lambd -- regularization hyperparameter, scalar
    keep_prob - probability of keeping a neuron active during drop-out, scalar.

    Returns:
    parameters -- parameters learned by the model. They can then be used to predict.
    """

    grads = {}
    costs = []                            # to keep track of the cost

    m = X.shape[1]                        # number of examples
    

    # Loop (gradient descent)

    mini_batch_size = 32

    half_batch = mini_batch_size // 2
    num_complete_minibatches = math.floor(m/mini_batch_size)

    Xi = X.reshape(5087,3197)
    Yi = Y.reshape(5087,1)

    yes_idx = np.where(Yi == 1.)[0]
    non_idx = np.where(Yi == 0.)[0]

    x_batch = np.empty((mini_batch_size,Xi.shape[1]), dtype='float32')
    y_batch = np.empty((mini_batch_size,Yi.shape[1]), dtype='float32')
    
    layers_dims = [x_batch.shape[1], 50, 25, 12, 1]
    
    parameters = initialize_parameters(layers_dims)
    
    for j in range(0, num_iterations):
        for k in range(0, num_complete_minibatches):
            np.roll(yes_idx,k,axis = 0)
            np.roll(non_idx,k,axis = 0)
            x_batch[:half_batch] = Xi[yes_idx[:half_batch]]  # positive examples in X - half-batch
            x_batch[half_batch:] = Xi[non_idx[half_batch:mini_batch_size]]
            y_batch[:half_batch] = Yi[yes_idx[:half_batch]]
            y_batch[half_batch:] = Yi[non_idx[half_batch:mini_batch_size]]
    
            for i in range(mini_batch_size):
                sz = np.random.randint(x_batch.shape[1])
                x_batch[i] = np.roll(x_batch[i], sz, axis = 0)
            return x_batch
    
            x_batch = x_batch.reshape(x_batch.shape[0],x_batch.shape[1])
            y_batch = y_batch.reshape(y_batch.shape[0],y_batch.shape[1])


        # Forward propagation: LINEAR -> RELU -> LINEAR -> RELU -> LINEAR -> SIGMOID.
            if keep_prob == 0.5:
                a4, cache = forward_propagation(x_batch, parameters)

        # Cost function
            if lambd == 0.1:
                cost = compute_cost(a4, y_batch) + np.multiply((lambd / 2*m),np.sum(parameters["W4"]**2))

        # Backward propagation.
            assert(lambd==0.1 or keep_prob==0.5)    # it is possible to use both L2 regularization and dropout,
                                            # but this assignment will only explore one at a time
            if lambd == 0.1 and keep_prob == 0.5:
                grads = backward_propagation(x_batch,y_batch, cache)


        # Update parameters.
            parameters = update_parameters(parameters, grads, learning_rate)
            parameters = np.append(parameters,parameters,axis = 0)
            
            if print_cost and i % 100 == 0:
                print("Cost after iteration {}: {}".format(i, cost))
            if print_cost and i % 100 == 0:
                costs.append(cost)

    # plot the cost
    plt.plot(costs)
    plt.ylabel('cost')
    plt.xlabel('iterations (x1,000)')
    plt.title("Learning rate =" + str(learning_rate))
    plt.show()

    return parameters

parameters = model(x_train, y_train)
print ("On the training set:")
predictions_train = predict(x_train, y_train, parameters)
print ("On the test set:")
predictions_test = predict(x_test, y_test, parameters)


axes = plt.gca()
axes.set_xlim([-3,3])
axes.set_ylim([-5,6])
plot_decision_boundary(lambda x: predict_dec(parameters, x.T), x_train,y_train)

yes_idx = np.where(y_test == 1.)[1]
plt.plot([predictions_test[:,i] for i in yes_idx], 'bo')
non_idx = np.where(y_test == 0.)[1]
plt.plot([predictions_test[:,i] for i in non_idx], 'ro')

yes_idx = np.where(y_train == 1.)[1]
plt.plot([predictions_train[:,i] for i in yes_idx], 'bo')
non_idx = np.where(y_train == 0.)[1]
plt.plot([predictions_train[:,i] for i in non_idx], 'ro')

